// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `svga.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MovieParams {
    // message fields
    pub viewBoxWidth: f32,
    pub viewBoxHeight: f32,
    pub fps: i32,
    pub frames: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MovieParams {
    fn default() -> &'a MovieParams {
        <MovieParams as ::protobuf::Message>::default_instance()
    }
}

impl MovieParams {
    pub fn new() -> MovieParams {
        ::std::default::Default::default()
    }

    // float viewBoxWidth = 1;


    pub fn get_viewBoxWidth(&self) -> f32 {
        self.viewBoxWidth
    }
    pub fn clear_viewBoxWidth(&mut self) {
        self.viewBoxWidth = 0.;
    }

    // Param is passed by value, moved
    pub fn set_viewBoxWidth(&mut self, v: f32) {
        self.viewBoxWidth = v;
    }

    // float viewBoxHeight = 2;


    pub fn get_viewBoxHeight(&self) -> f32 {
        self.viewBoxHeight
    }
    pub fn clear_viewBoxHeight(&mut self) {
        self.viewBoxHeight = 0.;
    }

    // Param is passed by value, moved
    pub fn set_viewBoxHeight(&mut self, v: f32) {
        self.viewBoxHeight = v;
    }

    // int32 fps = 3;


    pub fn get_fps(&self) -> i32 {
        self.fps
    }
    pub fn clear_fps(&mut self) {
        self.fps = 0;
    }

    // Param is passed by value, moved
    pub fn set_fps(&mut self, v: i32) {
        self.fps = v;
    }

    // int32 frames = 4;


    pub fn get_frames(&self) -> i32 {
        self.frames
    }
    pub fn clear_frames(&mut self) {
        self.frames = 0;
    }

    // Param is passed by value, moved
    pub fn set_frames(&mut self, v: i32) {
        self.frames = v;
    }
}

impl ::protobuf::Message for MovieParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.viewBoxWidth = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.viewBoxHeight = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fps = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.frames = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.viewBoxWidth != 0. {
            my_size += 5;
        }
        if self.viewBoxHeight != 0. {
            my_size += 5;
        }
        if self.fps != 0 {
            my_size += ::protobuf::rt::value_size(3, self.fps, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frames != 0 {
            my_size += ::protobuf::rt::value_size(4, self.frames, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.viewBoxWidth != 0. {
            os.write_float(1, self.viewBoxWidth)?;
        }
        if self.viewBoxHeight != 0. {
            os.write_float(2, self.viewBoxHeight)?;
        }
        if self.fps != 0 {
            os.write_int32(3, self.fps)?;
        }
        if self.frames != 0 {
            os.write_int32(4, self.frames)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MovieParams {
        MovieParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "viewBoxWidth",
                |m: &MovieParams| { &m.viewBoxWidth },
                |m: &mut MovieParams| { &mut m.viewBoxWidth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "viewBoxHeight",
                |m: &MovieParams| { &m.viewBoxHeight },
                |m: &mut MovieParams| { &mut m.viewBoxHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "fps",
                |m: &MovieParams| { &m.fps },
                |m: &mut MovieParams| { &mut m.fps },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "frames",
                |m: &MovieParams| { &m.frames },
                |m: &mut MovieParams| { &mut m.frames },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MovieParams>(
                "MovieParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MovieParams {
        static instance: ::protobuf::rt::LazyV2<MovieParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MovieParams::new)
    }
}

impl ::protobuf::Clear for MovieParams {
    fn clear(&mut self) {
        self.viewBoxWidth = 0.;
        self.viewBoxHeight = 0.;
        self.fps = 0;
        self.frames = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MovieParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovieParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SpriteEntity {
    // message fields
    pub imageKey: ::std::string::String,
    pub frames: ::protobuf::RepeatedField<FrameEntity>,
    pub matteKey: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SpriteEntity {
    fn default() -> &'a SpriteEntity {
        <SpriteEntity as ::protobuf::Message>::default_instance()
    }
}

impl SpriteEntity {
    pub fn new() -> SpriteEntity {
        ::std::default::Default::default()
    }

    // string imageKey = 1;


    pub fn get_imageKey(&self) -> &str {
        &self.imageKey
    }
    pub fn clear_imageKey(&mut self) {
        self.imageKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_imageKey(&mut self, v: ::std::string::String) {
        self.imageKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_imageKey(&mut self) -> &mut ::std::string::String {
        &mut self.imageKey
    }

    // Take field
    pub fn take_imageKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.imageKey, ::std::string::String::new())
    }

    // repeated .com.opensource.svga.FrameEntity frames = 2;


    pub fn get_frames(&self) -> &[FrameEntity] {
        &self.frames
    }
    pub fn clear_frames(&mut self) {
        self.frames.clear();
    }

    // Param is passed by value, moved
    pub fn set_frames(&mut self, v: ::protobuf::RepeatedField<FrameEntity>) {
        self.frames = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frames(&mut self) -> &mut ::protobuf::RepeatedField<FrameEntity> {
        &mut self.frames
    }

    // Take field
    pub fn take_frames(&mut self) -> ::protobuf::RepeatedField<FrameEntity> {
        ::std::mem::replace(&mut self.frames, ::protobuf::RepeatedField::new())
    }

    // string matteKey = 3;


    pub fn get_matteKey(&self) -> &str {
        &self.matteKey
    }
    pub fn clear_matteKey(&mut self) {
        self.matteKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_matteKey(&mut self, v: ::std::string::String) {
        self.matteKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_matteKey(&mut self) -> &mut ::std::string::String {
        &mut self.matteKey
    }

    // Take field
    pub fn take_matteKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.matteKey, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SpriteEntity {
    fn is_initialized(&self) -> bool {
        for v in &self.frames {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.imageKey)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.frames)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.matteKey)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.imageKey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.imageKey);
        }
        for value in &self.frames {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.matteKey.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.matteKey);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.imageKey.is_empty() {
            os.write_string(1, &self.imageKey)?;
        }
        for v in &self.frames {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.matteKey.is_empty() {
            os.write_string(3, &self.matteKey)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SpriteEntity {
        SpriteEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "imageKey",
                |m: &SpriteEntity| { &m.imageKey },
                |m: &mut SpriteEntity| { &mut m.imageKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FrameEntity>>(
                "frames",
                |m: &SpriteEntity| { &m.frames },
                |m: &mut SpriteEntity| { &mut m.frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "matteKey",
                |m: &SpriteEntity| { &m.matteKey },
                |m: &mut SpriteEntity| { &mut m.matteKey },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SpriteEntity>(
                "SpriteEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SpriteEntity {
        static instance: ::protobuf::rt::LazyV2<SpriteEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SpriteEntity::new)
    }
}

impl ::protobuf::Clear for SpriteEntity {
    fn clear(&mut self) {
        self.imageKey.clear();
        self.frames.clear();
        self.matteKey.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SpriteEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpriteEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct AudioEntity {
    // message fields
    pub audioKey: ::std::string::String,
    pub startFrame: i32,
    pub endFrame: i32,
    pub startTime: i32,
    pub totalTime: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AudioEntity {
    fn default() -> &'a AudioEntity {
        <AudioEntity as ::protobuf::Message>::default_instance()
    }
}

impl AudioEntity {
    pub fn new() -> AudioEntity {
        ::std::default::Default::default()
    }

    // string audioKey = 1;


    pub fn get_audioKey(&self) -> &str {
        &self.audioKey
    }
    pub fn clear_audioKey(&mut self) {
        self.audioKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_audioKey(&mut self, v: ::std::string::String) {
        self.audioKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_audioKey(&mut self) -> &mut ::std::string::String {
        &mut self.audioKey
    }

    // Take field
    pub fn take_audioKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.audioKey, ::std::string::String::new())
    }

    // int32 startFrame = 2;


    pub fn get_startFrame(&self) -> i32 {
        self.startFrame
    }
    pub fn clear_startFrame(&mut self) {
        self.startFrame = 0;
    }

    // Param is passed by value, moved
    pub fn set_startFrame(&mut self, v: i32) {
        self.startFrame = v;
    }

    // int32 endFrame = 3;


    pub fn get_endFrame(&self) -> i32 {
        self.endFrame
    }
    pub fn clear_endFrame(&mut self) {
        self.endFrame = 0;
    }

    // Param is passed by value, moved
    pub fn set_endFrame(&mut self, v: i32) {
        self.endFrame = v;
    }

    // int32 startTime = 4;


    pub fn get_startTime(&self) -> i32 {
        self.startTime
    }
    pub fn clear_startTime(&mut self) {
        self.startTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_startTime(&mut self, v: i32) {
        self.startTime = v;
    }

    // int32 totalTime = 5;


    pub fn get_totalTime(&self) -> i32 {
        self.totalTime
    }
    pub fn clear_totalTime(&mut self) {
        self.totalTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_totalTime(&mut self, v: i32) {
        self.totalTime = v;
    }
}

impl ::protobuf::Message for AudioEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.audioKey)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.startFrame = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.endFrame = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.startTime = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.totalTime = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.audioKey.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.audioKey);
        }
        if self.startFrame != 0 {
            my_size += ::protobuf::rt::value_size(2, self.startFrame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.endFrame != 0 {
            my_size += ::protobuf::rt::value_size(3, self.endFrame, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.startTime != 0 {
            my_size += ::protobuf::rt::value_size(4, self.startTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.totalTime != 0 {
            my_size += ::protobuf::rt::value_size(5, self.totalTime, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.audioKey.is_empty() {
            os.write_string(1, &self.audioKey)?;
        }
        if self.startFrame != 0 {
            os.write_int32(2, self.startFrame)?;
        }
        if self.endFrame != 0 {
            os.write_int32(3, self.endFrame)?;
        }
        if self.startTime != 0 {
            os.write_int32(4, self.startTime)?;
        }
        if self.totalTime != 0 {
            os.write_int32(5, self.totalTime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AudioEntity {
        AudioEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "audioKey",
                |m: &AudioEntity| { &m.audioKey },
                |m: &mut AudioEntity| { &mut m.audioKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "startFrame",
                |m: &AudioEntity| { &m.startFrame },
                |m: &mut AudioEntity| { &mut m.startFrame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "endFrame",
                |m: &AudioEntity| { &m.endFrame },
                |m: &mut AudioEntity| { &mut m.endFrame },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "startTime",
                |m: &AudioEntity| { &m.startTime },
                |m: &mut AudioEntity| { &mut m.startTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "totalTime",
                |m: &AudioEntity| { &m.totalTime },
                |m: &mut AudioEntity| { &mut m.totalTime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AudioEntity>(
                "AudioEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AudioEntity {
        static instance: ::protobuf::rt::LazyV2<AudioEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AudioEntity::new)
    }
}

impl ::protobuf::Clear for AudioEntity {
    fn clear(&mut self) {
        self.audioKey.clear();
        self.startFrame = 0;
        self.endFrame = 0;
        self.startTime = 0;
        self.totalTime = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AudioEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AudioEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Layout {
    // message fields
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Layout {
    fn default() -> &'a Layout {
        <Layout as ::protobuf::Message>::default_instance()
    }
}

impl Layout {
    pub fn new() -> Layout {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float width = 3;


    pub fn get_width(&self) -> f32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0.;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: f32) {
        self.width = v;
    }

    // float height = 4;


    pub fn get_height(&self) -> f32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0.;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: f32) {
        self.height = v;
    }
}

impl ::protobuf::Message for Layout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.width = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.width != 0. {
            my_size += 5;
        }
        if self.height != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.width != 0. {
            os.write_float(3, self.width)?;
        }
        if self.height != 0. {
            os.write_float(4, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Layout {
        Layout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &Layout| { &m.x },
                |m: &mut Layout| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &Layout| { &m.y },
                |m: &mut Layout| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "width",
                |m: &Layout| { &m.width },
                |m: &mut Layout| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "height",
                |m: &Layout| { &m.height },
                |m: &mut Layout| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Layout>(
                "Layout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Layout {
        static instance: ::protobuf::rt::LazyV2<Layout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Layout::new)
    }
}

impl ::protobuf::Clear for Layout {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.width = 0.;
        self.height = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Layout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Layout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Transform {
    // message fields
    pub a: f32,
    pub b: f32,
    pub c: f32,
    pub d: f32,
    pub tx: f32,
    pub ty: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transform {
    fn default() -> &'a Transform {
        <Transform as ::protobuf::Message>::default_instance()
    }
}

impl Transform {
    pub fn new() -> Transform {
        ::std::default::Default::default()
    }

    // float a = 1;


    pub fn get_a(&self) -> f32 {
        self.a
    }
    pub fn clear_a(&mut self) {
        self.a = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: f32) {
        self.a = v;
    }

    // float b = 2;


    pub fn get_b(&self) -> f32 {
        self.b
    }
    pub fn clear_b(&mut self) {
        self.b = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: f32) {
        self.b = v;
    }

    // float c = 3;


    pub fn get_c(&self) -> f32 {
        self.c
    }
    pub fn clear_c(&mut self) {
        self.c = 0.;
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: f32) {
        self.c = v;
    }

    // float d = 4;


    pub fn get_d(&self) -> f32 {
        self.d
    }
    pub fn clear_d(&mut self) {
        self.d = 0.;
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: f32) {
        self.d = v;
    }

    // float tx = 5;


    pub fn get_tx(&self) -> f32 {
        self.tx
    }
    pub fn clear_tx(&mut self) {
        self.tx = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: f32) {
        self.tx = v;
    }

    // float ty = 6;


    pub fn get_ty(&self) -> f32 {
        self.ty
    }
    pub fn clear_ty(&mut self) {
        self.ty = 0.;
    }

    // Param is passed by value, moved
    pub fn set_ty(&mut self, v: f32) {
        self.ty = v;
    }
}

impl ::protobuf::Message for Transform {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.b = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.c = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.d = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.tx = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ty = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.a != 0. {
            my_size += 5;
        }
        if self.b != 0. {
            my_size += 5;
        }
        if self.c != 0. {
            my_size += 5;
        }
        if self.d != 0. {
            my_size += 5;
        }
        if self.tx != 0. {
            my_size += 5;
        }
        if self.ty != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.a != 0. {
            os.write_float(1, self.a)?;
        }
        if self.b != 0. {
            os.write_float(2, self.b)?;
        }
        if self.c != 0. {
            os.write_float(3, self.c)?;
        }
        if self.d != 0. {
            os.write_float(4, self.d)?;
        }
        if self.tx != 0. {
            os.write_float(5, self.tx)?;
        }
        if self.ty != 0. {
            os.write_float(6, self.ty)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transform {
        Transform::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "a",
                |m: &Transform| { &m.a },
                |m: &mut Transform| { &mut m.a },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "b",
                |m: &Transform| { &m.b },
                |m: &mut Transform| { &mut m.b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "c",
                |m: &Transform| { &m.c },
                |m: &mut Transform| { &mut m.c },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "d",
                |m: &Transform| { &m.d },
                |m: &mut Transform| { &mut m.d },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "tx",
                |m: &Transform| { &m.tx },
                |m: &mut Transform| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "ty",
                |m: &Transform| { &m.ty },
                |m: &mut Transform| { &mut m.ty },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transform>(
                "Transform",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transform {
        static instance: ::protobuf::rt::LazyV2<Transform> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transform::new)
    }
}

impl ::protobuf::Clear for Transform {
    fn clear(&mut self) {
        self.a = 0.;
        self.b = 0.;
        self.c = 0.;
        self.d = 0.;
        self.tx = 0.;
        self.ty = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transform {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity {
    // message fields
    pub field_type: ShapeEntity_ShapeType,
    pub styles: ::protobuf::SingularPtrField<ShapeEntity_ShapeStyle>,
    pub transform: ::protobuf::SingularPtrField<Transform>,
    // message oneof groups
    pub args: ::std::option::Option<ShapeEntity_oneof_args>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity {
    fn default() -> &'a ShapeEntity {
        <ShapeEntity as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ShapeEntity_oneof_args {
    shape(ShapeEntity_ShapeArgs),
    rect(ShapeEntity_RectArgs),
    ellipse(ShapeEntity_EllipseArgs),
}

impl ShapeEntity {
    pub fn new() -> ShapeEntity {
        ::std::default::Default::default()
    }

    // .com.opensource.svga.ShapeEntity.ShapeType type = 1;


    pub fn get_field_type(&self) -> ShapeEntity_ShapeType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ShapeEntity_ShapeType::SHAPE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ShapeEntity_ShapeType) {
        self.field_type = v;
    }

    // .com.opensource.svga.ShapeEntity.ShapeArgs shape = 2;


    pub fn get_shape(&self) -> &ShapeEntity_ShapeArgs {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::shape(ref v)) => v,
            _ => <ShapeEntity_ShapeArgs as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_shape(&mut self) {
        self.args = ::std::option::Option::None;
    }

    pub fn has_shape(&self) -> bool {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::shape(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ShapeEntity_ShapeArgs) {
        self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::shape(v))
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ShapeEntity_ShapeArgs {
        if let ::std::option::Option::Some(ShapeEntity_oneof_args::shape(_)) = self.args {
        } else {
            self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::shape(ShapeEntity_ShapeArgs::new()));
        }
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::shape(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_shape(&mut self) -> ShapeEntity_ShapeArgs {
        if self.has_shape() {
            match self.args.take() {
                ::std::option::Option::Some(ShapeEntity_oneof_args::shape(v)) => v,
                _ => panic!(),
            }
        } else {
            ShapeEntity_ShapeArgs::new()
        }
    }

    // .com.opensource.svga.ShapeEntity.RectArgs rect = 3;


    pub fn get_rect(&self) -> &ShapeEntity_RectArgs {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::rect(ref v)) => v,
            _ => <ShapeEntity_RectArgs as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rect(&mut self) {
        self.args = ::std::option::Option::None;
    }

    pub fn has_rect(&self) -> bool {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::rect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rect(&mut self, v: ShapeEntity_RectArgs) {
        self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::rect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rect(&mut self) -> &mut ShapeEntity_RectArgs {
        if let ::std::option::Option::Some(ShapeEntity_oneof_args::rect(_)) = self.args {
        } else {
            self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::rect(ShapeEntity_RectArgs::new()));
        }
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::rect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rect(&mut self) -> ShapeEntity_RectArgs {
        if self.has_rect() {
            match self.args.take() {
                ::std::option::Option::Some(ShapeEntity_oneof_args::rect(v)) => v,
                _ => panic!(),
            }
        } else {
            ShapeEntity_RectArgs::new()
        }
    }

    // .com.opensource.svga.ShapeEntity.EllipseArgs ellipse = 4;


    pub fn get_ellipse(&self) -> &ShapeEntity_EllipseArgs {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(ref v)) => v,
            _ => <ShapeEntity_EllipseArgs as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ellipse(&mut self) {
        self.args = ::std::option::Option::None;
    }

    pub fn has_ellipse(&self) -> bool {
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ellipse(&mut self, v: ShapeEntity_EllipseArgs) {
        self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ellipse(&mut self) -> &mut ShapeEntity_EllipseArgs {
        if let ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(_)) = self.args {
        } else {
            self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(ShapeEntity_EllipseArgs::new()));
        }
        match self.args {
            ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ellipse(&mut self) -> ShapeEntity_EllipseArgs {
        if self.has_ellipse() {
            match self.args.take() {
                ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(v)) => v,
                _ => panic!(),
            }
        } else {
            ShapeEntity_EllipseArgs::new()
        }
    }

    // .com.opensource.svga.ShapeEntity.ShapeStyle styles = 10;


    pub fn get_styles(&self) -> &ShapeEntity_ShapeStyle {
        self.styles.as_ref().unwrap_or_else(|| <ShapeEntity_ShapeStyle as ::protobuf::Message>::default_instance())
    }
    pub fn clear_styles(&mut self) {
        self.styles.clear();
    }

    pub fn has_styles(&self) -> bool {
        self.styles.is_some()
    }

    // Param is passed by value, moved
    pub fn set_styles(&mut self, v: ShapeEntity_ShapeStyle) {
        self.styles = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_styles(&mut self) -> &mut ShapeEntity_ShapeStyle {
        if self.styles.is_none() {
            self.styles.set_default();
        }
        self.styles.as_mut().unwrap()
    }

    // Take field
    pub fn take_styles(&mut self) -> ShapeEntity_ShapeStyle {
        self.styles.take().unwrap_or_else(|| ShapeEntity_ShapeStyle::new())
    }

    // .com.opensource.svga.Transform transform = 11;


    pub fn get_transform(&self) -> &Transform {
        self.transform.as_ref().unwrap_or_else(|| <Transform as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transform(&mut self) {
        self.transform.clear();
    }

    pub fn has_transform(&self) -> bool {
        self.transform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: Transform) {
        self.transform = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transform(&mut self) -> &mut Transform {
        if self.transform.is_none() {
            self.transform.set_default();
        }
        self.transform.as_mut().unwrap()
    }

    // Take field
    pub fn take_transform(&mut self) -> Transform {
        self.transform.take().unwrap_or_else(|| Transform::new())
    }
}

impl ::protobuf::Message for ShapeEntity {
    fn is_initialized(&self) -> bool {
        if let Some(ShapeEntity_oneof_args::shape(ref v)) = self.args {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ShapeEntity_oneof_args::rect(ref v)) = self.args {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ShapeEntity_oneof_args::ellipse(ref v)) = self.args {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.styles {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transform {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::shape(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::rect(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.args = ::std::option::Option::Some(ShapeEntity_oneof_args::ellipse(is.read_message()?));
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.styles)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transform)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != ShapeEntity_ShapeType::SHAPE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let Some(ref v) = self.styles.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transform.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.args {
            match v {
                &ShapeEntity_oneof_args::shape(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ShapeEntity_oneof_args::rect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ShapeEntity_oneof_args::ellipse(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != ShapeEntity_ShapeType::SHAPE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let Some(ref v) = self.styles.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transform.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.args {
            match v {
                &ShapeEntity_oneof_args::shape(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ShapeEntity_oneof_args::rect(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ShapeEntity_oneof_args::ellipse(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity {
        ShapeEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ShapeEntity_ShapeType>>(
                "type",
                |m: &ShapeEntity| { &m.field_type },
                |m: &mut ShapeEntity| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ShapeEntity_ShapeArgs>(
                "shape",
                ShapeEntity::has_shape,
                ShapeEntity::get_shape,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ShapeEntity_RectArgs>(
                "rect",
                ShapeEntity::has_rect,
                ShapeEntity::get_rect,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ShapeEntity_EllipseArgs>(
                "ellipse",
                ShapeEntity::has_ellipse,
                ShapeEntity::get_ellipse,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeEntity_ShapeStyle>>(
                "styles",
                |m: &ShapeEntity| { &m.styles },
                |m: &mut ShapeEntity| { &mut m.styles },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transform>>(
                "transform",
                |m: &ShapeEntity| { &m.transform },
                |m: &mut ShapeEntity| { &mut m.transform },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity>(
                "ShapeEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity::new)
    }
}

impl ::protobuf::Clear for ShapeEntity {
    fn clear(&mut self) {
        self.field_type = ShapeEntity_ShapeType::SHAPE;
        self.args = ::std::option::Option::None;
        self.args = ::std::option::Option::None;
        self.args = ::std::option::Option::None;
        self.styles.clear();
        self.transform.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity_ShapeArgs {
    // message fields
    pub d: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity_ShapeArgs {
    fn default() -> &'a ShapeEntity_ShapeArgs {
        <ShapeEntity_ShapeArgs as ::protobuf::Message>::default_instance()
    }
}

impl ShapeEntity_ShapeArgs {
    pub fn new() -> ShapeEntity_ShapeArgs {
        ::std::default::Default::default()
    }

    // string d = 1;


    pub fn get_d(&self) -> &str {
        &self.d
    }
    pub fn clear_d(&mut self) {
        self.d.clear();
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: ::std::string::String) {
        self.d = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_d(&mut self) -> &mut ::std::string::String {
        &mut self.d
    }

    // Take field
    pub fn take_d(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.d, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ShapeEntity_ShapeArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.d)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.d.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.d);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.d.is_empty() {
            os.write_string(1, &self.d)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity_ShapeArgs {
        ShapeEntity_ShapeArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "d",
                |m: &ShapeEntity_ShapeArgs| { &m.d },
                |m: &mut ShapeEntity_ShapeArgs| { &mut m.d },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity_ShapeArgs>(
                "ShapeEntity.ShapeArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity_ShapeArgs {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity_ShapeArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity_ShapeArgs::new)
    }
}

impl ::protobuf::Clear for ShapeEntity_ShapeArgs {
    fn clear(&mut self) {
        self.d.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity_ShapeArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity_RectArgs {
    // message fields
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub cornerRadius: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity_RectArgs {
    fn default() -> &'a ShapeEntity_RectArgs {
        <ShapeEntity_RectArgs as ::protobuf::Message>::default_instance()
    }
}

impl ShapeEntity_RectArgs {
    pub fn new() -> ShapeEntity_RectArgs {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float width = 3;


    pub fn get_width(&self) -> f32 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0.;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: f32) {
        self.width = v;
    }

    // float height = 4;


    pub fn get_height(&self) -> f32 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0.;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: f32) {
        self.height = v;
    }

    // float cornerRadius = 5;


    pub fn get_cornerRadius(&self) -> f32 {
        self.cornerRadius
    }
    pub fn clear_cornerRadius(&mut self) {
        self.cornerRadius = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cornerRadius(&mut self, v: f32) {
        self.cornerRadius = v;
    }
}

impl ::protobuf::Message for ShapeEntity_RectArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.width = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.height = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.cornerRadius = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.width != 0. {
            my_size += 5;
        }
        if self.height != 0. {
            my_size += 5;
        }
        if self.cornerRadius != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.width != 0. {
            os.write_float(3, self.width)?;
        }
        if self.height != 0. {
            os.write_float(4, self.height)?;
        }
        if self.cornerRadius != 0. {
            os.write_float(5, self.cornerRadius)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity_RectArgs {
        ShapeEntity_RectArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &ShapeEntity_RectArgs| { &m.x },
                |m: &mut ShapeEntity_RectArgs| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &ShapeEntity_RectArgs| { &m.y },
                |m: &mut ShapeEntity_RectArgs| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "width",
                |m: &ShapeEntity_RectArgs| { &m.width },
                |m: &mut ShapeEntity_RectArgs| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "height",
                |m: &ShapeEntity_RectArgs| { &m.height },
                |m: &mut ShapeEntity_RectArgs| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "cornerRadius",
                |m: &ShapeEntity_RectArgs| { &m.cornerRadius },
                |m: &mut ShapeEntity_RectArgs| { &mut m.cornerRadius },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity_RectArgs>(
                "ShapeEntity.RectArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity_RectArgs {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity_RectArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity_RectArgs::new)
    }
}

impl ::protobuf::Clear for ShapeEntity_RectArgs {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.width = 0.;
        self.height = 0.;
        self.cornerRadius = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity_RectArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_RectArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity_EllipseArgs {
    // message fields
    pub x: f32,
    pub y: f32,
    pub radiusX: f32,
    pub radiusY: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity_EllipseArgs {
    fn default() -> &'a ShapeEntity_EllipseArgs {
        <ShapeEntity_EllipseArgs as ::protobuf::Message>::default_instance()
    }
}

impl ShapeEntity_EllipseArgs {
    pub fn new() -> ShapeEntity_EllipseArgs {
        ::std::default::Default::default()
    }

    // float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float radiusX = 3;


    pub fn get_radiusX(&self) -> f32 {
        self.radiusX
    }
    pub fn clear_radiusX(&mut self) {
        self.radiusX = 0.;
    }

    // Param is passed by value, moved
    pub fn set_radiusX(&mut self, v: f32) {
        self.radiusX = v;
    }

    // float radiusY = 4;


    pub fn get_radiusY(&self) -> f32 {
        self.radiusY
    }
    pub fn clear_radiusY(&mut self) {
        self.radiusY = 0.;
    }

    // Param is passed by value, moved
    pub fn set_radiusY(&mut self, v: f32) {
        self.radiusY = v;
    }
}

impl ::protobuf::Message for ShapeEntity_EllipseArgs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.radiusX = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.radiusY = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.radiusX != 0. {
            my_size += 5;
        }
        if self.radiusY != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.radiusX != 0. {
            os.write_float(3, self.radiusX)?;
        }
        if self.radiusY != 0. {
            os.write_float(4, self.radiusY)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity_EllipseArgs {
        ShapeEntity_EllipseArgs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &ShapeEntity_EllipseArgs| { &m.x },
                |m: &mut ShapeEntity_EllipseArgs| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &ShapeEntity_EllipseArgs| { &m.y },
                |m: &mut ShapeEntity_EllipseArgs| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "radiusX",
                |m: &ShapeEntity_EllipseArgs| { &m.radiusX },
                |m: &mut ShapeEntity_EllipseArgs| { &mut m.radiusX },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "radiusY",
                |m: &ShapeEntity_EllipseArgs| { &m.radiusY },
                |m: &mut ShapeEntity_EllipseArgs| { &mut m.radiusY },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity_EllipseArgs>(
                "ShapeEntity.EllipseArgs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity_EllipseArgs {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity_EllipseArgs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity_EllipseArgs::new)
    }
}

impl ::protobuf::Clear for ShapeEntity_EllipseArgs {
    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.radiusX = 0.;
        self.radiusY = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity_EllipseArgs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_EllipseArgs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity_ShapeStyle {
    // message fields
    pub fill: ::protobuf::SingularPtrField<ShapeEntity_ShapeStyle_RGBAColor>,
    pub stroke: ::protobuf::SingularPtrField<ShapeEntity_ShapeStyle_RGBAColor>,
    pub strokeWidth: f32,
    pub lineCap: ShapeEntity_ShapeStyle_LineCap,
    pub lineJoin: ShapeEntity_ShapeStyle_LineJoin,
    pub miterLimit: f32,
    pub lineDashI: f32,
    pub lineDashII: f32,
    pub lineDashIII: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity_ShapeStyle {
    fn default() -> &'a ShapeEntity_ShapeStyle {
        <ShapeEntity_ShapeStyle as ::protobuf::Message>::default_instance()
    }
}

impl ShapeEntity_ShapeStyle {
    pub fn new() -> ShapeEntity_ShapeStyle {
        ::std::default::Default::default()
    }

    // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor fill = 1;


    pub fn get_fill(&self) -> &ShapeEntity_ShapeStyle_RGBAColor {
        self.fill.as_ref().unwrap_or_else(|| <ShapeEntity_ShapeStyle_RGBAColor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fill(&mut self) {
        self.fill.clear();
    }

    pub fn has_fill(&self) -> bool {
        self.fill.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fill(&mut self, v: ShapeEntity_ShapeStyle_RGBAColor) {
        self.fill = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fill(&mut self) -> &mut ShapeEntity_ShapeStyle_RGBAColor {
        if self.fill.is_none() {
            self.fill.set_default();
        }
        self.fill.as_mut().unwrap()
    }

    // Take field
    pub fn take_fill(&mut self) -> ShapeEntity_ShapeStyle_RGBAColor {
        self.fill.take().unwrap_or_else(|| ShapeEntity_ShapeStyle_RGBAColor::new())
    }

    // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor stroke = 2;


    pub fn get_stroke(&self) -> &ShapeEntity_ShapeStyle_RGBAColor {
        self.stroke.as_ref().unwrap_or_else(|| <ShapeEntity_ShapeStyle_RGBAColor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stroke(&mut self) {
        self.stroke.clear();
    }

    pub fn has_stroke(&self) -> bool {
        self.stroke.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stroke(&mut self, v: ShapeEntity_ShapeStyle_RGBAColor) {
        self.stroke = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stroke(&mut self) -> &mut ShapeEntity_ShapeStyle_RGBAColor {
        if self.stroke.is_none() {
            self.stroke.set_default();
        }
        self.stroke.as_mut().unwrap()
    }

    // Take field
    pub fn take_stroke(&mut self) -> ShapeEntity_ShapeStyle_RGBAColor {
        self.stroke.take().unwrap_or_else(|| ShapeEntity_ShapeStyle_RGBAColor::new())
    }

    // float strokeWidth = 3;


    pub fn get_strokeWidth(&self) -> f32 {
        self.strokeWidth
    }
    pub fn clear_strokeWidth(&mut self) {
        self.strokeWidth = 0.;
    }

    // Param is passed by value, moved
    pub fn set_strokeWidth(&mut self, v: f32) {
        self.strokeWidth = v;
    }

    // .com.opensource.svga.ShapeEntity.ShapeStyle.LineCap lineCap = 4;


    pub fn get_lineCap(&self) -> ShapeEntity_ShapeStyle_LineCap {
        self.lineCap
    }
    pub fn clear_lineCap(&mut self) {
        self.lineCap = ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT;
    }

    // Param is passed by value, moved
    pub fn set_lineCap(&mut self, v: ShapeEntity_ShapeStyle_LineCap) {
        self.lineCap = v;
    }

    // .com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin lineJoin = 5;


    pub fn get_lineJoin(&self) -> ShapeEntity_ShapeStyle_LineJoin {
        self.lineJoin
    }
    pub fn clear_lineJoin(&mut self) {
        self.lineJoin = ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER;
    }

    // Param is passed by value, moved
    pub fn set_lineJoin(&mut self, v: ShapeEntity_ShapeStyle_LineJoin) {
        self.lineJoin = v;
    }

    // float miterLimit = 6;


    pub fn get_miterLimit(&self) -> f32 {
        self.miterLimit
    }
    pub fn clear_miterLimit(&mut self) {
        self.miterLimit = 0.;
    }

    // Param is passed by value, moved
    pub fn set_miterLimit(&mut self, v: f32) {
        self.miterLimit = v;
    }

    // float lineDashI = 7;


    pub fn get_lineDashI(&self) -> f32 {
        self.lineDashI
    }
    pub fn clear_lineDashI(&mut self) {
        self.lineDashI = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lineDashI(&mut self, v: f32) {
        self.lineDashI = v;
    }

    // float lineDashII = 8;


    pub fn get_lineDashII(&self) -> f32 {
        self.lineDashII
    }
    pub fn clear_lineDashII(&mut self) {
        self.lineDashII = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lineDashII(&mut self, v: f32) {
        self.lineDashII = v;
    }

    // float lineDashIII = 9;


    pub fn get_lineDashIII(&self) -> f32 {
        self.lineDashIII
    }
    pub fn clear_lineDashIII(&mut self) {
        self.lineDashIII = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lineDashIII(&mut self, v: f32) {
        self.lineDashIII = v;
    }
}

impl ::protobuf::Message for ShapeEntity_ShapeStyle {
    fn is_initialized(&self) -> bool {
        for v in &self.fill {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stroke {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fill)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stroke)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.strokeWidth = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.lineCap, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.lineJoin, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.miterLimit = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lineDashI = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lineDashII = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lineDashIII = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.fill.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stroke.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.strokeWidth != 0. {
            my_size += 5;
        }
        if self.lineCap != ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT {
            my_size += ::protobuf::rt::enum_size(4, self.lineCap);
        }
        if self.lineJoin != ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER {
            my_size += ::protobuf::rt::enum_size(5, self.lineJoin);
        }
        if self.miterLimit != 0. {
            my_size += 5;
        }
        if self.lineDashI != 0. {
            my_size += 5;
        }
        if self.lineDashII != 0. {
            my_size += 5;
        }
        if self.lineDashIII != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.fill.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stroke.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.strokeWidth != 0. {
            os.write_float(3, self.strokeWidth)?;
        }
        if self.lineCap != ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.lineCap))?;
        }
        if self.lineJoin != ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.lineJoin))?;
        }
        if self.miterLimit != 0. {
            os.write_float(6, self.miterLimit)?;
        }
        if self.lineDashI != 0. {
            os.write_float(7, self.lineDashI)?;
        }
        if self.lineDashII != 0. {
            os.write_float(8, self.lineDashII)?;
        }
        if self.lineDashIII != 0. {
            os.write_float(9, self.lineDashIII)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity_ShapeStyle {
        ShapeEntity_ShapeStyle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeEntity_ShapeStyle_RGBAColor>>(
                "fill",
                |m: &ShapeEntity_ShapeStyle| { &m.fill },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.fill },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeEntity_ShapeStyle_RGBAColor>>(
                "stroke",
                |m: &ShapeEntity_ShapeStyle| { &m.stroke },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.stroke },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "strokeWidth",
                |m: &ShapeEntity_ShapeStyle| { &m.strokeWidth },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.strokeWidth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ShapeEntity_ShapeStyle_LineCap>>(
                "lineCap",
                |m: &ShapeEntity_ShapeStyle| { &m.lineCap },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.lineCap },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ShapeEntity_ShapeStyle_LineJoin>>(
                "lineJoin",
                |m: &ShapeEntity_ShapeStyle| { &m.lineJoin },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.lineJoin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "miterLimit",
                |m: &ShapeEntity_ShapeStyle| { &m.miterLimit },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.miterLimit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lineDashI",
                |m: &ShapeEntity_ShapeStyle| { &m.lineDashI },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.lineDashI },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lineDashII",
                |m: &ShapeEntity_ShapeStyle| { &m.lineDashII },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.lineDashII },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lineDashIII",
                |m: &ShapeEntity_ShapeStyle| { &m.lineDashIII },
                |m: &mut ShapeEntity_ShapeStyle| { &mut m.lineDashIII },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity_ShapeStyle>(
                "ShapeEntity.ShapeStyle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity_ShapeStyle {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity_ShapeStyle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity_ShapeStyle::new)
    }
}

impl ::protobuf::Clear for ShapeEntity_ShapeStyle {
    fn clear(&mut self) {
        self.fill.clear();
        self.stroke.clear();
        self.strokeWidth = 0.;
        self.lineCap = ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT;
        self.lineJoin = ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER;
        self.miterLimit = 0.;
        self.lineDashI = 0.;
        self.lineDashII = 0.;
        self.lineDashIII = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity_ShapeStyle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeStyle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShapeEntity_ShapeStyle_RGBAColor {
    // message fields
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ShapeEntity_ShapeStyle_RGBAColor {
    fn default() -> &'a ShapeEntity_ShapeStyle_RGBAColor {
        <ShapeEntity_ShapeStyle_RGBAColor as ::protobuf::Message>::default_instance()
    }
}

impl ShapeEntity_ShapeStyle_RGBAColor {
    pub fn new() -> ShapeEntity_ShapeStyle_RGBAColor {
        ::std::default::Default::default()
    }

    // float r = 1;


    pub fn get_r(&self) -> f32 {
        self.r
    }
    pub fn clear_r(&mut self) {
        self.r = 0.;
    }

    // Param is passed by value, moved
    pub fn set_r(&mut self, v: f32) {
        self.r = v;
    }

    // float g = 2;


    pub fn get_g(&self) -> f32 {
        self.g
    }
    pub fn clear_g(&mut self) {
        self.g = 0.;
    }

    // Param is passed by value, moved
    pub fn set_g(&mut self, v: f32) {
        self.g = v;
    }

    // float b = 3;


    pub fn get_b(&self) -> f32 {
        self.b
    }
    pub fn clear_b(&mut self) {
        self.b = 0.;
    }

    // Param is passed by value, moved
    pub fn set_b(&mut self, v: f32) {
        self.b = v;
    }

    // float a = 4;


    pub fn get_a(&self) -> f32 {
        self.a
    }
    pub fn clear_a(&mut self) {
        self.a = 0.;
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: f32) {
        self.a = v;
    }
}

impl ::protobuf::Message for ShapeEntity_ShapeStyle_RGBAColor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.r = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.g = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.b = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r != 0. {
            my_size += 5;
        }
        if self.g != 0. {
            my_size += 5;
        }
        if self.b != 0. {
            my_size += 5;
        }
        if self.a != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.r != 0. {
            os.write_float(1, self.r)?;
        }
        if self.g != 0. {
            os.write_float(2, self.g)?;
        }
        if self.b != 0. {
            os.write_float(3, self.b)?;
        }
        if self.a != 0. {
            os.write_float(4, self.a)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShapeEntity_ShapeStyle_RGBAColor {
        ShapeEntity_ShapeStyle_RGBAColor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "r",
                |m: &ShapeEntity_ShapeStyle_RGBAColor| { &m.r },
                |m: &mut ShapeEntity_ShapeStyle_RGBAColor| { &mut m.r },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "g",
                |m: &ShapeEntity_ShapeStyle_RGBAColor| { &m.g },
                |m: &mut ShapeEntity_ShapeStyle_RGBAColor| { &mut m.g },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "b",
                |m: &ShapeEntity_ShapeStyle_RGBAColor| { &m.b },
                |m: &mut ShapeEntity_ShapeStyle_RGBAColor| { &mut m.b },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "a",
                |m: &ShapeEntity_ShapeStyle_RGBAColor| { &m.a },
                |m: &mut ShapeEntity_ShapeStyle_RGBAColor| { &mut m.a },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ShapeEntity_ShapeStyle_RGBAColor>(
                "ShapeEntity.ShapeStyle.RGBAColor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ShapeEntity_ShapeStyle_RGBAColor {
        static instance: ::protobuf::rt::LazyV2<ShapeEntity_ShapeStyle_RGBAColor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ShapeEntity_ShapeStyle_RGBAColor::new)
    }
}

impl ::protobuf::Clear for ShapeEntity_ShapeStyle_RGBAColor {
    fn clear(&mut self) {
        self.r = 0.;
        self.g = 0.;
        self.b = 0.;
        self.a = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShapeEntity_ShapeStyle_RGBAColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeStyle_RGBAColor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ShapeEntity_ShapeStyle_LineCap {
    LineCap_BUTT = 0,
    LineCap_ROUND = 1,
    LineCap_SQUARE = 2,
}

impl ::protobuf::ProtobufEnum for ShapeEntity_ShapeStyle_LineCap {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShapeEntity_ShapeStyle_LineCap> {
        match value {
            0 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT),
            1 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineCap::LineCap_ROUND),
            2 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineCap::LineCap_SQUARE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ShapeEntity_ShapeStyle_LineCap] = &[
            ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT,
            ShapeEntity_ShapeStyle_LineCap::LineCap_ROUND,
            ShapeEntity_ShapeStyle_LineCap::LineCap_SQUARE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ShapeEntity_ShapeStyle_LineCap>("ShapeEntity.ShapeStyle.LineCap", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ShapeEntity_ShapeStyle_LineCap {
}

impl ::std::default::Default for ShapeEntity_ShapeStyle_LineCap {
    fn default() -> Self {
        ShapeEntity_ShapeStyle_LineCap::LineCap_BUTT
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeStyle_LineCap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ShapeEntity_ShapeStyle_LineJoin {
    LineJoin_MITER = 0,
    LineJoin_ROUND = 1,
    LineJoin_BEVEL = 2,
}

impl ::protobuf::ProtobufEnum for ShapeEntity_ShapeStyle_LineJoin {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShapeEntity_ShapeStyle_LineJoin> {
        match value {
            0 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER),
            1 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineJoin::LineJoin_ROUND),
            2 => ::std::option::Option::Some(ShapeEntity_ShapeStyle_LineJoin::LineJoin_BEVEL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ShapeEntity_ShapeStyle_LineJoin] = &[
            ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER,
            ShapeEntity_ShapeStyle_LineJoin::LineJoin_ROUND,
            ShapeEntity_ShapeStyle_LineJoin::LineJoin_BEVEL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ShapeEntity_ShapeStyle_LineJoin>("ShapeEntity.ShapeStyle.LineJoin", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ShapeEntity_ShapeStyle_LineJoin {
}

impl ::std::default::Default for ShapeEntity_ShapeStyle_LineJoin {
    fn default() -> Self {
        ShapeEntity_ShapeStyle_LineJoin::LineJoin_MITER
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeStyle_LineJoin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum ShapeEntity_ShapeType {
    SHAPE = 0,
    RECT = 1,
    ELLIPSE = 2,
    KEEP = 3,
}

impl ::protobuf::ProtobufEnum for ShapeEntity_ShapeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShapeEntity_ShapeType> {
        match value {
            0 => ::std::option::Option::Some(ShapeEntity_ShapeType::SHAPE),
            1 => ::std::option::Option::Some(ShapeEntity_ShapeType::RECT),
            2 => ::std::option::Option::Some(ShapeEntity_ShapeType::ELLIPSE),
            3 => ::std::option::Option::Some(ShapeEntity_ShapeType::KEEP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ShapeEntity_ShapeType] = &[
            ShapeEntity_ShapeType::SHAPE,
            ShapeEntity_ShapeType::RECT,
            ShapeEntity_ShapeType::ELLIPSE,
            ShapeEntity_ShapeType::KEEP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ShapeEntity_ShapeType>("ShapeEntity.ShapeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ShapeEntity_ShapeType {
}

impl ::std::default::Default for ShapeEntity_ShapeType {
    fn default() -> Self {
        ShapeEntity_ShapeType::SHAPE
    }
}

impl ::protobuf::reflect::ProtobufValue for ShapeEntity_ShapeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct FrameEntity {
    // message fields
    pub alpha: f32,
    pub layout: ::protobuf::SingularPtrField<Layout>,
    pub transform: ::protobuf::SingularPtrField<Transform>,
    pub clipPath: ::std::string::String,
    pub shapes: ::protobuf::RepeatedField<ShapeEntity>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FrameEntity {
    fn default() -> &'a FrameEntity {
        <FrameEntity as ::protobuf::Message>::default_instance()
    }
}

impl FrameEntity {
    pub fn new() -> FrameEntity {
        ::std::default::Default::default()
    }

    // float alpha = 1;


    pub fn get_alpha(&self) -> f32 {
        self.alpha
    }
    pub fn clear_alpha(&mut self) {
        self.alpha = 0.;
    }

    // Param is passed by value, moved
    pub fn set_alpha(&mut self, v: f32) {
        self.alpha = v;
    }

    // .com.opensource.svga.Layout layout = 2;


    pub fn get_layout(&self) -> &Layout {
        self.layout.as_ref().unwrap_or_else(|| <Layout as ::protobuf::Message>::default_instance())
    }
    pub fn clear_layout(&mut self) {
        self.layout.clear();
    }

    pub fn has_layout(&self) -> bool {
        self.layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: Layout) {
        self.layout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut Layout {
        if self.layout.is_none() {
            self.layout.set_default();
        }
        self.layout.as_mut().unwrap()
    }

    // Take field
    pub fn take_layout(&mut self) -> Layout {
        self.layout.take().unwrap_or_else(|| Layout::new())
    }

    // .com.opensource.svga.Transform transform = 3;


    pub fn get_transform(&self) -> &Transform {
        self.transform.as_ref().unwrap_or_else(|| <Transform as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transform(&mut self) {
        self.transform.clear();
    }

    pub fn has_transform(&self) -> bool {
        self.transform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: Transform) {
        self.transform = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transform(&mut self) -> &mut Transform {
        if self.transform.is_none() {
            self.transform.set_default();
        }
        self.transform.as_mut().unwrap()
    }

    // Take field
    pub fn take_transform(&mut self) -> Transform {
        self.transform.take().unwrap_or_else(|| Transform::new())
    }

    // string clipPath = 4;


    pub fn get_clipPath(&self) -> &str {
        &self.clipPath
    }
    pub fn clear_clipPath(&mut self) {
        self.clipPath.clear();
    }

    // Param is passed by value, moved
    pub fn set_clipPath(&mut self, v: ::std::string::String) {
        self.clipPath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clipPath(&mut self) -> &mut ::std::string::String {
        &mut self.clipPath
    }

    // Take field
    pub fn take_clipPath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clipPath, ::std::string::String::new())
    }

    // repeated .com.opensource.svga.ShapeEntity shapes = 5;


    pub fn get_shapes(&self) -> &[ShapeEntity] {
        &self.shapes
    }
    pub fn clear_shapes(&mut self) {
        self.shapes.clear();
    }

    // Param is passed by value, moved
    pub fn set_shapes(&mut self, v: ::protobuf::RepeatedField<ShapeEntity>) {
        self.shapes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shapes(&mut self) -> &mut ::protobuf::RepeatedField<ShapeEntity> {
        &mut self.shapes
    }

    // Take field
    pub fn take_shapes(&mut self) -> ::protobuf::RepeatedField<ShapeEntity> {
        ::std::mem::replace(&mut self.shapes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FrameEntity {
    fn is_initialized(&self) -> bool {
        for v in &self.layout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transform {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shapes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.alpha = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.layout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transform)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clipPath)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.shapes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.alpha != 0. {
            my_size += 5;
        }
        if let Some(ref v) = self.layout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transform.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.clipPath.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.clipPath);
        }
        for value in &self.shapes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.alpha != 0. {
            os.write_float(1, self.alpha)?;
        }
        if let Some(ref v) = self.layout.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transform.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.clipPath.is_empty() {
            os.write_string(4, &self.clipPath)?;
        }
        for v in &self.shapes {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FrameEntity {
        FrameEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "alpha",
                |m: &FrameEntity| { &m.alpha },
                |m: &mut FrameEntity| { &mut m.alpha },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Layout>>(
                "layout",
                |m: &FrameEntity| { &m.layout },
                |m: &mut FrameEntity| { &mut m.layout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transform>>(
                "transform",
                |m: &FrameEntity| { &m.transform },
                |m: &mut FrameEntity| { &mut m.transform },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clipPath",
                |m: &FrameEntity| { &m.clipPath },
                |m: &mut FrameEntity| { &mut m.clipPath },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShapeEntity>>(
                "shapes",
                |m: &FrameEntity| { &m.shapes },
                |m: &mut FrameEntity| { &mut m.shapes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FrameEntity>(
                "FrameEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FrameEntity {
        static instance: ::protobuf::rt::LazyV2<FrameEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FrameEntity::new)
    }
}

impl ::protobuf::Clear for FrameEntity {
    fn clear(&mut self) {
        self.alpha = 0.;
        self.layout.clear();
        self.transform.clear();
        self.clipPath.clear();
        self.shapes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FrameEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FrameEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MovieEntity {
    // message fields
    pub version: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<MovieParams>,
    pub images: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    pub sprites: ::protobuf::RepeatedField<SpriteEntity>,
    pub audios: ::protobuf::RepeatedField<AudioEntity>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MovieEntity {
    fn default() -> &'a MovieEntity {
        <MovieEntity as ::protobuf::Message>::default_instance()
    }
}

impl MovieEntity {
    pub fn new() -> MovieEntity {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .com.opensource.svga.MovieParams params = 2;


    pub fn get_params(&self) -> &MovieParams {
        self.params.as_ref().unwrap_or_else(|| <MovieParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: MovieParams) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut MovieParams {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> MovieParams {
        self.params.take().unwrap_or_else(|| MovieParams::new())
    }

    // repeated .com.opensource.svga.MovieEntity.ImagesEntry images = 3;


    pub fn get_images(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &self.images
    }
    pub fn clear_images(&mut self) {
        self.images.clear();
    }

    // Param is passed by value, moved
    pub fn set_images(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>) {
        self.images = v;
    }

    // Mutable pointer to the field.
    pub fn mut_images(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.images
    }

    // Take field
    pub fn take_images(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.images, ::std::collections::HashMap::new())
    }

    // repeated .com.opensource.svga.SpriteEntity sprites = 4;


    pub fn get_sprites(&self) -> &[SpriteEntity] {
        &self.sprites
    }
    pub fn clear_sprites(&mut self) {
        self.sprites.clear();
    }

    // Param is passed by value, moved
    pub fn set_sprites(&mut self, v: ::protobuf::RepeatedField<SpriteEntity>) {
        self.sprites = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sprites(&mut self) -> &mut ::protobuf::RepeatedField<SpriteEntity> {
        &mut self.sprites
    }

    // Take field
    pub fn take_sprites(&mut self) -> ::protobuf::RepeatedField<SpriteEntity> {
        ::std::mem::replace(&mut self.sprites, ::protobuf::RepeatedField::new())
    }

    // repeated .com.opensource.svga.AudioEntity audios = 5;


    pub fn get_audios(&self) -> &[AudioEntity] {
        &self.audios
    }
    pub fn clear_audios(&mut self) {
        self.audios.clear();
    }

    // Param is passed by value, moved
    pub fn set_audios(&mut self, v: ::protobuf::RepeatedField<AudioEntity>) {
        self.audios = v;
    }

    // Mutable pointer to the field.
    pub fn mut_audios(&mut self) -> &mut ::protobuf::RepeatedField<AudioEntity> {
        &mut self.audios
    }

    // Take field
    pub fn take_audios(&mut self) -> ::protobuf::RepeatedField<AudioEntity> {
        ::std::mem::replace(&mut self.audios, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MovieEntity {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sprites {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.audios {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(wire_type, is, &mut self.images)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sprites)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.audios)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(3, &self.images);
        for value in &self.sprites {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.audios {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(3, &self.images, os)?;
        for v in &self.sprites {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.audios {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MovieEntity {
        MovieEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &MovieEntity| { &m.version },
                |m: &mut MovieEntity| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MovieParams>>(
                "params",
                |m: &MovieEntity| { &m.params },
                |m: &mut MovieEntity| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(
                "images",
                |m: &MovieEntity| { &m.images },
                |m: &mut MovieEntity| { &mut m.images },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SpriteEntity>>(
                "sprites",
                |m: &MovieEntity| { &m.sprites },
                |m: &mut MovieEntity| { &mut m.sprites },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AudioEntity>>(
                "audios",
                |m: &MovieEntity| { &m.audios },
                |m: &mut MovieEntity| { &mut m.audios },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MovieEntity>(
                "MovieEntity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MovieEntity {
        static instance: ::protobuf::rt::LazyV2<MovieEntity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MovieEntity::new)
    }
}

impl ::protobuf::Clear for MovieEntity {
    fn clear(&mut self) {
        self.version.clear();
        self.params.clear();
        self.images.clear();
        self.sprites.clear();
        self.audios.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MovieEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovieEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nsvga.proto\x12\x13com.opensource.svga\"\x81\x01\n\x0bMovieParams\x12\
    \"\n\x0cviewBoxWidth\x18\x01\x20\x01(\x02R\x0cviewBoxWidth\x12$\n\rviewB\
    oxHeight\x18\x02\x20\x01(\x02R\rviewBoxHeight\x12\x10\n\x03fps\x18\x03\
    \x20\x01(\x05R\x03fps\x12\x16\n\x06frames\x18\x04\x20\x01(\x05R\x06frame\
    s\"\x80\x01\n\x0cSpriteEntity\x12\x1a\n\x08imageKey\x18\x01\x20\x01(\tR\
    \x08imageKey\x128\n\x06frames\x18\x02\x20\x03(\x0b2\x20.com.opensource.s\
    vga.FrameEntityR\x06frames\x12\x1a\n\x08matteKey\x18\x03\x20\x01(\tR\x08\
    matteKey\"\xa1\x01\n\x0bAudioEntity\x12\x1a\n\x08audioKey\x18\x01\x20\
    \x01(\tR\x08audioKey\x12\x1e\n\nstartFrame\x18\x02\x20\x01(\x05R\nstartF\
    rame\x12\x1a\n\x08endFrame\x18\x03\x20\x01(\x05R\x08endFrame\x12\x1c\n\t\
    startTime\x18\x04\x20\x01(\x05R\tstartTime\x12\x1c\n\ttotalTime\x18\x05\
    \x20\x01(\x05R\ttotalTime\"R\n\x06Layout\x12\x0c\n\x01x\x18\x01\x20\x01(\
    \x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x02R\x01y\x12\x14\n\x05width\
    \x18\x03\x20\x01(\x02R\x05width\x12\x16\n\x06height\x18\x04\x20\x01(\x02\
    R\x06height\"c\n\tTransform\x12\x0c\n\x01a\x18\x01\x20\x01(\x02R\x01a\
    \x12\x0c\n\x01b\x18\x02\x20\x01(\x02R\x01b\x12\x0c\n\x01c\x18\x03\x20\
    \x01(\x02R\x01c\x12\x0c\n\x01d\x18\x04\x20\x01(\x02R\x01d\x12\x0e\n\x02t\
    x\x18\x05\x20\x01(\x02R\x02tx\x12\x0e\n\x02ty\x18\x06\x20\x01(\x02R\x02t\
    y\"\x91\x0b\n\x0bShapeEntity\x12>\n\x04type\x18\x01\x20\x01(\x0e2*.com.o\
    pensource.svga.ShapeEntity.ShapeTypeR\x04type\x12B\n\x05shape\x18\x02\
    \x20\x01(\x0b2*.com.opensource.svga.ShapeEntity.ShapeArgsH\0R\x05shape\
    \x12?\n\x04rect\x18\x03\x20\x01(\x0b2).com.opensource.svga.ShapeEntity.R\
    ectArgsH\0R\x04rect\x12H\n\x07ellipse\x18\x04\x20\x01(\x0b2,.com.opensou\
    rce.svga.ShapeEntity.EllipseArgsH\0R\x07ellipse\x12C\n\x06styles\x18\n\
    \x20\x01(\x0b2+.com.opensource.svga.ShapeEntity.ShapeStyleR\x06styles\
    \x12<\n\ttransform\x18\x0b\x20\x01(\x0b2\x1e.com.opensource.svga.Transfo\
    rmR\ttransform\x1a\x19\n\tShapeArgs\x12\x0c\n\x01d\x18\x01\x20\x01(\tR\
    \x01d\x1ax\n\x08RectArgs\x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\
    \x0c\n\x01y\x18\x02\x20\x01(\x02R\x01y\x12\x14\n\x05width\x18\x03\x20\
    \x01(\x02R\x05width\x12\x16\n\x06height\x18\x04\x20\x01(\x02R\x06height\
    \x12\"\n\x0ccornerRadius\x18\x05\x20\x01(\x02R\x0ccornerRadius\x1a]\n\
    \x0bEllipseArgs\x12\x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\
    \x18\x02\x20\x01(\x02R\x01y\x12\x18\n\x07radiusX\x18\x03\x20\x01(\x02R\
    \x07radiusX\x12\x18\n\x07radiusY\x18\x04\x20\x01(\x02R\x07radiusY\x1a\
    \xba\x05\n\nShapeStyle\x12I\n\x04fill\x18\x01\x20\x01(\x0b25.com.opensou\
    rce.svga.ShapeEntity.ShapeStyle.RGBAColorR\x04fill\x12M\n\x06stroke\x18\
    \x02\x20\x01(\x0b25.com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor\
    R\x06stroke\x12\x20\n\x0bstrokeWidth\x18\x03\x20\x01(\x02R\x0bstrokeWidt\
    h\x12M\n\x07lineCap\x18\x04\x20\x01(\x0e23.com.opensource.svga.ShapeEnti\
    ty.ShapeStyle.LineCapR\x07lineCap\x12P\n\x08lineJoin\x18\x05\x20\x01(\
    \x0e24.com.opensource.svga.ShapeEntity.ShapeStyle.LineJoinR\x08lineJoin\
    \x12\x1e\n\nmiterLimit\x18\x06\x20\x01(\x02R\nmiterLimit\x12\x1c\n\tline\
    DashI\x18\x07\x20\x01(\x02R\tlineDashI\x12\x1e\n\nlineDashII\x18\x08\x20\
    \x01(\x02R\nlineDashII\x12\x20\n\x0blineDashIII\x18\t\x20\x01(\x02R\x0bl\
    ineDashIII\x1aC\n\tRGBAColor\x12\x0c\n\x01r\x18\x01\x20\x01(\x02R\x01r\
    \x12\x0c\n\x01g\x18\x02\x20\x01(\x02R\x01g\x12\x0c\n\x01b\x18\x03\x20\
    \x01(\x02R\x01b\x12\x0c\n\x01a\x18\x04\x20\x01(\x02R\x01a\"B\n\x07LineCa\
    p\x12\x10\n\x0cLineCap_BUTT\x10\0\x12\x11\n\rLineCap_ROUND\x10\x01\x12\
    \x12\n\x0eLineCap_SQUARE\x10\x02\"F\n\x08LineJoin\x12\x12\n\x0eLineJoin_\
    MITER\x10\0\x12\x12\n\x0eLineJoin_ROUND\x10\x01\x12\x12\n\x0eLineJoin_BE\
    VEL\x10\x02\"7\n\tShapeType\x12\t\n\x05SHAPE\x10\0\x12\x08\n\x04RECT\x10\
    \x01\x12\x0b\n\x07ELLIPSE\x10\x02\x12\x08\n\x04KEEP\x10\x03B\x06\n\x04ar\
    gs\"\xec\x01\n\x0bFrameEntity\x12\x14\n\x05alpha\x18\x01\x20\x01(\x02R\
    \x05alpha\x123\n\x06layout\x18\x02\x20\x01(\x0b2\x1b.com.opensource.svga\
    .LayoutR\x06layout\x12<\n\ttransform\x18\x03\x20\x01(\x0b2\x1e.com.opens\
    ource.svga.TransformR\ttransform\x12\x1a\n\x08clipPath\x18\x04\x20\x01(\
    \tR\x08clipPath\x128\n\x06shapes\x18\x05\x20\x03(\x0b2\x20.com.opensourc\
    e.svga.ShapeEntityR\x06shapes\"\xd9\x02\n\x0bMovieEntity\x12\x18\n\x07ve\
    rsion\x18\x01\x20\x01(\tR\x07version\x128\n\x06params\x18\x02\x20\x01(\
    \x0b2\x20.com.opensource.svga.MovieParamsR\x06params\x12D\n\x06images\
    \x18\x03\x20\x03(\x0b2,.com.opensource.svga.MovieEntity.ImagesEntryR\x06\
    images\x12;\n\x07sprites\x18\x04\x20\x03(\x0b2!.com.opensource.svga.Spri\
    teEntityR\x07sprites\x128\n\x06audios\x18\x05\x20\x03(\x0b2\x20.com.open\
    source.svga.AudioEntityR\x06audios\x1a9\n\x0bImagesEntry\x12\x10\n\x03ke\
    y\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value:\x028\x01B-\n\x1fcom.opensource.svgaplayer.proto\xa2\x02\tSVGA\
    Protob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
