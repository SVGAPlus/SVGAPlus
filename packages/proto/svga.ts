'use strict' // code generated by pbf v3.2.1

// MovieParams ========================================

const MovieParams = {
  read: function (pbf, end) {
    return pbf.readFields(MovieParams._readField, { viewBoxWidth: 0, viewBoxHeight: 0, fps: 0, frames: 0 }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.viewBoxWidth = pbf.readFloat()
    else if (tag === 2) obj.viewBoxHeight = pbf.readFloat()
    else if (tag === 3) obj.fps = pbf.readVarint(true)
    else if (tag === 4) obj.frames = pbf.readVarint(true)
  },
  write: function (obj, pbf) {
    if (obj.viewBoxWidth) pbf.writeFloatField(1, obj.viewBoxWidth)
    if (obj.viewBoxHeight) pbf.writeFloatField(2, obj.viewBoxHeight)
    if (obj.fps) pbf.writeVarintField(3, obj.fps)
    if (obj.frames) pbf.writeVarintField(4, obj.frames)
  }
}

// SpriteEntity ========================================

const SpriteEntity = {
  read: function (pbf, end) {
    return pbf.readFields(SpriteEntity._readField, { imageKey: '', frames: [], matteKey: '' }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.imageKey = pbf.readString()
    else if (tag === 2) obj.frames.push(FrameEntity.read(pbf, pbf.readVarint() + pbf.pos))
    else if (tag === 3) obj.matteKey = pbf.readString()
  },
  write: function (obj, pbf) {
    if (obj.imageKey) pbf.writeStringField(1, obj.imageKey)
    if (obj.frames) for (let i = 0; i < obj.frames.length; i++) pbf.writeMessage(2, FrameEntity.write, obj.frames[i])
    if (obj.matteKey) pbf.writeStringField(3, obj.matteKey)
  }
}

// AudioEntity ========================================

const AudioEntity = {
  read: function (pbf, end) {
    return pbf.readFields(AudioEntity._readField, { audioKey: '', startFrame: 0, endFrame: 0, startTime: 0, totalTime: 0 }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.audioKey = pbf.readString()
    else if (tag === 2) obj.startFrame = pbf.readVarint(true)
    else if (tag === 3) obj.endFrame = pbf.readVarint(true)
    else if (tag === 4) obj.startTime = pbf.readVarint(true)
    else if (tag === 5) obj.totalTime = pbf.readVarint(true)
  },
  write: function (obj, pbf) {
    if (obj.audioKey) pbf.writeStringField(1, obj.audioKey)
    if (obj.startFrame) pbf.writeVarintField(2, obj.startFrame)
    if (obj.endFrame) pbf.writeVarintField(3, obj.endFrame)
    if (obj.startTime) pbf.writeVarintField(4, obj.startTime)
    if (obj.totalTime) pbf.writeVarintField(5, obj.totalTime)
  }
}

// Layout ========================================

const Layout = {
  read: function (pbf, end) {
    return pbf.readFields(Layout._readField, { x: 0, y: 0, width: 0, height: 0 }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.x = pbf.readFloat()
    else if (tag === 2) obj.y = pbf.readFloat()
    else if (tag === 3) obj.width = pbf.readFloat()
    else if (tag === 4) obj.height = pbf.readFloat()
  },
  write: function (obj, pbf) {
    if (obj.x) pbf.writeFloatField(1, obj.x)
    if (obj.y) pbf.writeFloatField(2, obj.y)
    if (obj.width) pbf.writeFloatField(3, obj.width)
    if (obj.height) pbf.writeFloatField(4, obj.height)
  }
}

// Transform ========================================

const Transform = {
  read: function (pbf, end) {
    return pbf.readFields(Transform._readField, { a: 0, b: 0, c: 0, d: 0, tx: 0, ty: 0 }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.a = pbf.readFloat()
    else if (tag === 2) obj.b = pbf.readFloat()
    else if (tag === 3) obj.c = pbf.readFloat()
    else if (tag === 4) obj.d = pbf.readFloat()
    else if (tag === 5) obj.tx = pbf.readFloat()
    else if (tag === 6) obj.ty = pbf.readFloat()
  },
  write: function (obj, pbf) {
    if (obj.a) pbf.writeFloatField(1, obj.a)
    if (obj.b) pbf.writeFloatField(2, obj.b)
    if (obj.c) pbf.writeFloatField(3, obj.c)
    if (obj.d) pbf.writeFloatField(4, obj.d)
    if (obj.tx) pbf.writeFloatField(5, obj.tx)
    if (obj.ty) pbf.writeFloatField(6, obj.ty)
  }
}

// ShapeEntity ========================================

const ShapeEntity = {
  read: function (pbf, end) {
    return pbf.readFields(ShapeEntity._readField, { type: 0, shape: null, args: null, rect: null, ellipse: null, styles: null, transform: null }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.type = pbf.readVarint()
    else if (tag === 2) obj.shape = ShapeEntity.ShapeArgs.read(pbf, pbf.readVarint() + pbf.pos), obj.args = 'shape'
    else if (tag === 3) obj.rect = ShapeEntity.RectArgs.read(pbf, pbf.readVarint() + pbf.pos), obj.args = 'rect'
    else if (tag === 4) obj.ellipse = ShapeEntity.EllipseArgs.read(pbf, pbf.readVarint() + pbf.pos), obj.args = 'ellipse'
    else if (tag === 10) obj.styles = ShapeEntity.ShapeStyle.read(pbf, pbf.readVarint() + pbf.pos)
    else if (tag === 11) obj.transform = Transform.read(pbf, pbf.readVarint() + pbf.pos)
  },
  write: function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, obj.type)
    if (obj.shape) pbf.writeMessage(2, ShapeEntity.ShapeArgs.write, obj.shape)
    if (obj.rect) pbf.writeMessage(3, ShapeEntity.RectArgs.write, obj.rect)
    if (obj.ellipse) pbf.writeMessage(4, ShapeEntity.EllipseArgs.write, obj.ellipse)
    if (obj.styles) pbf.writeMessage(10, ShapeEntity.ShapeStyle.write, obj.styles)
    if (obj.transform) pbf.writeMessage(11, Transform.write, obj.transform)
  },
  ShapeType: {
    SHAPE: {
      value: 0,
      options: {}
    },
    RECT: {
      value: 1,
      options: {}
    },
    ELLIPSE: {
      value: 2,
      options: {}
    },
    KEEP: {
      value: 3,
      options: {}
    }
  },
  ShapeArgs: {
    read: function (pbf, end) {
      return pbf.readFields(ShapeEntity.ShapeArgs._readField, { d: '' }, end)
    },
    _readField: function (tag, obj, pbf) {
      if (tag === 1) obj.d = pbf.readString()
    },
    write: function (obj, pbf) {
      if (obj.d) pbf.writeStringField(1, obj.d)
    }
  },
  RectArgs: {
    read: function (pbf, end) {
      return pbf.readFields(ShapeEntity.RectArgs._readField, { x: 0, y: 0, width: 0, height: 0, cornerRadius: 0 }, end)
    },
    _readField: function (tag, obj, pbf) {
      if (tag === 1) obj.x = pbf.readFloat()
      else if (tag === 2) obj.y = pbf.readFloat()
      else if (tag === 3) obj.width = pbf.readFloat()
      else if (tag === 4) obj.height = pbf.readFloat()
      else if (tag === 5) obj.cornerRadius = pbf.readFloat()
    },
    write: function (obj, pbf) {
      if (obj.x) pbf.writeFloatField(1, obj.x)
      if (obj.y) pbf.writeFloatField(2, obj.y)
      if (obj.width) pbf.writeFloatField(3, obj.width)
      if (obj.height) pbf.writeFloatField(4, obj.height)
      if (obj.cornerRadius) pbf.writeFloatField(5, obj.cornerRadius)
    }
  },
  EllipseArgs: {
    read: function (pbf, end) {
      return pbf.readFields(ShapeEntity.EllipseArgs._readField, { x: 0, y: 0, radiusX: 0, radiusY: 0 }, end)
    },
    _readField: function (tag, obj, pbf) {
      if (tag === 1) obj.x = pbf.readFloat()
      else if (tag === 2) obj.y = pbf.readFloat()
      else if (tag === 3) obj.radiusX = pbf.readFloat()
      else if (tag === 4) obj.radiusY = pbf.readFloat()
    },
    write: function (obj, pbf) {
      if (obj.x) pbf.writeFloatField(1, obj.x)
      if (obj.y) pbf.writeFloatField(2, obj.y)
      if (obj.radiusX) pbf.writeFloatField(3, obj.radiusX)
      if (obj.radiusY) pbf.writeFloatField(4, obj.radiusY)
    }
  },
  ShapeStyle: {
    read: function (pbf, end) {
      return pbf.readFields(ShapeEntity.ShapeStyle._readField, { fill: null, stroke: null, strokeWidth: 0, lineCap: 0, lineJoin: 0, miterLimit: 0, lineDashI: 0, lineDashII: 0, lineDashIII: 0 }, end)
    },
    _readField: function (tag, obj, pbf) {
      if (tag === 1) obj.fill = ShapeEntity.ShapeStyle.RGBAColor.read(pbf, pbf.readVarint() + pbf.pos)
      else if (tag === 2) obj.stroke = ShapeEntity.ShapeStyle.RGBAColor.read(pbf, pbf.readVarint() + pbf.pos)
      else if (tag === 3) obj.strokeWidth = pbf.readFloat()
      else if (tag === 4) obj.lineCap = pbf.readVarint()
      else if (tag === 5) obj.lineJoin = pbf.readVarint()
      else if (tag === 6) obj.miterLimit = pbf.readFloat()
      else if (tag === 7) obj.lineDashI = pbf.readFloat()
      else if (tag === 8) obj.lineDashII = pbf.readFloat()
      else if (tag === 9) obj.lineDashIII = pbf.readFloat()
    },
    write: function (obj, pbf) {
      if (obj.fill) pbf.writeMessage(1, ShapeEntity.ShapeStyle.RGBAColor.write, obj.fill)
      if (obj.stroke) pbf.writeMessage(2, ShapeEntity.ShapeStyle.RGBAColor.write, obj.stroke)
      if (obj.strokeWidth) pbf.writeFloatField(3, obj.strokeWidth)
      if (obj.lineCap) pbf.writeVarintField(4, obj.lineCap)
      if (obj.lineJoin) pbf.writeVarintField(5, obj.lineJoin)
      if (obj.miterLimit) pbf.writeFloatField(6, obj.miterLimit)
      if (obj.lineDashI) pbf.writeFloatField(7, obj.lineDashI)
      if (obj.lineDashII) pbf.writeFloatField(8, obj.lineDashII)
      if (obj.lineDashIII) pbf.writeFloatField(9, obj.lineDashIII)
    },
    LineCap: {
      LineCap_BUTT: {
        value: 0,
        options: {}
      },
      LineCap_ROUND: {
        value: 1,
        options: {}
      },
      LineCap_SQUARE: {
        value: 2,
        options: {}
      }
    },
    LineJoin: {
      LineJoin_MITER: {
        value: 0,
        options: {}
      },
      LineJoin_ROUND: {
        value: 1,
        options: {}
      },
      LineJoin_BEVEL: {
        value: 2,
        options: {}
      }
    },

    RGBAColor: {
      read: function (pbf, end) {
        return pbf.readFields(ShapeEntity.ShapeStyle.RGBAColor._readField, { r: 0, g: 0, b: 0, a: 0 }, end)
      },
      _readField: function (tag, obj, pbf) {
        if (tag === 1) obj.r = pbf.readFloat()
        else if (tag === 2) obj.g = pbf.readFloat()
        else if (tag === 3) obj.b = pbf.readFloat()
        else if (tag === 4) obj.a = pbf.readFloat()
      },
      write: function (obj, pbf) {
        if (obj.r) pbf.writeFloatField(1, obj.r)
        if (obj.g) pbf.writeFloatField(2, obj.g)
        if (obj.b) pbf.writeFloatField(3, obj.b)
        if (obj.a) pbf.writeFloatField(4, obj.a)
      }
    }
  }
}

// FrameEntity ========================================

var FrameEntity = {
  read: function (pbf, end) {
    return pbf.readFields(FrameEntity._readField, { alpha: 0, layout: null, transform: null, clipPath: '', shapes: [] }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.alpha = pbf.readFloat()
    else if (tag === 2) obj.layout = Layout.read(pbf, pbf.readVarint() + pbf.pos)
    else if (tag === 3) obj.transform = Transform.read(pbf, pbf.readVarint() + pbf.pos)
    else if (tag === 4) obj.clipPath = pbf.readString()
    else if (tag === 5) obj.shapes.push(ShapeEntity.read(pbf, pbf.readVarint() + pbf.pos))
  },
  write: function (obj, pbf) {
    if (obj.alpha) pbf.writeFloatField(1, obj.alpha)
    if (obj.layout) pbf.writeMessage(2, Layout.write, obj.layout)
    if (obj.transform) pbf.writeMessage(3, Transform.write, obj.transform)
    if (obj.clipPath) pbf.writeStringField(4, obj.clipPath)
    if (obj.shapes) for (let i = 0; i < obj.shapes.length; i++) pbf.writeMessage(5, ShapeEntity.write, obj.shapes[i])
  }
}

// MovieEntity ========================================

const MovieEntity = {
  read: function (pbf, end) {
    return pbf.readFields(MovieEntity._readField, { version: '', params: null, images: {}, sprites: [], audios: [] }, end)
  },
  _readField: function (tag, obj, pbf) {
    if (tag === 1) obj.version = pbf.readString()
    else if (tag === 2) obj.params = MovieParams.read(pbf, pbf.readVarint() + pbf.pos)
    else if (tag === 3) { const entry = MovieEntity._FieldEntry3.read(pbf, pbf.readVarint() + pbf.pos); obj.images[entry.key] = entry.value } else if (tag === 4) obj.sprites.push(SpriteEntity.read(pbf, pbf.readVarint() + pbf.pos))
    else if (tag === 5) obj.audios.push(AudioEntity.read(pbf, pbf.readVarint() + pbf.pos))
  },
  write: function (obj, pbf) {
    if (obj.version) pbf.writeStringField(1, obj.version)
    if (obj.params) pbf.writeMessage(2, MovieParams.write, obj.params)
    if (obj.images) {
      for (let i in obj.images) {
        if (Object.prototype.hasOwnProperty.call(obj.images, i)) {
          pbf.writeMessage(3, MovieEntity._FieldEntry3.write, { key: i, value: obj.images[i] })
        }
      }
    }
    if (obj.sprites) {
      for (let i = 0; i < obj.sprites.length; i++) pbf.writeMessage(4, SpriteEntity.write, obj.sprites[i])
    }
    if (obj.audios) {
      for (let i = 0; i < obj.audios.length; i++) pbf.writeMessage(5, AudioEntity.write, obj.audios[i])
    }
  },

  _FieldEntry3: {
    read: function (pbf, end) {
      return pbf.readFields(MovieEntity._FieldEntry3._readField, { key: '', value: null }, end)
    },
    _readField: function (tag, obj, pbf) {
      if (tag === 1) obj.key = pbf.readString()
      else if (tag === 2) obj.value = pbf.readBytes()
    },
    write: function (obj, pbf) {
      if (obj.key) pbf.writeStringField(1, obj.key)
      if (obj.value) pbf.writeBytesField(2, obj.value)
    }
  }
}

export {
  MovieParams,
  SpriteEntity,
  AudioEntity,
  Layout,
  Transform,
  ShapeEntity,
  FrameEntity,
  MovieEntity
}
